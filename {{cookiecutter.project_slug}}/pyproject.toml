# SPDX-FileCopyrightText: {{cookiecutter.year}} {{cookiecutter.author_name}} <{{cookiecutter.author_email}}>
#
# SPDX-License-Identifier: {{cookiecutter.license}}


[tool.poetry]

name = "{{cookiecutter.package_name}}"
version = "0.1.0"
description = "{{cookiecutter.project_description}}"
readme = "README.md"
license = "{{cookiecutter.license}}"

authors = ["{{cookiecutter.author_name}} <{{cookiecutter.author_email}}>"]

[tool.poetry.dependencies]

python = "~{python_version}"

# Package's requirements
# minilog = "^1.5"
# click = "^7.0"

[tool.poetry.dev-dependencies]

bandit = "*"
black = "==20.8b1"
dlint = "*"
flake8 = "*"
isort = "*"
mypy = "*"
pre-commit = "*"
pycln = "*"
pytest = "*"
pytest-cov = "*"
pyupgrade = "*"
reuse = "*"
safety = "^1.10.3"
wemake-python-styleguide="*"

[tool.black]

line-length = 79
target-version = ["py36", "py37", "py38"]

[tool.coverage.run]

source = "{{cookiecutter.package_name}}"
omit = "{{cookiecutter.package_name}}/__main__.py"

[tool.coverage.report]

exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.isort]

multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 79
combine_as_imports = true

[tool.mypy]

files=["{{cookiecutter.package_name}}/**/*.py", "tests/**/*.py"]
ignore_missing_imports=true

[tool.pytest.ini_options]

testpaths = [
    "tests"
]

[build-system]

requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
